diff --git a/visualizacion/app/static/js/script.js b/visualizacion/app/static/js/script.js
index fa12361..a26019e 100644
--- a/visualizacion/app/static/js/script.js
+++ b/visualizacion/app/static/js/script.js
@@ -71,6 +71,7 @@ var form = d3.select("#sender");
 var input_cantidad = d3.select("#cant");
 var input_pob_esc = d3.select("#pob_esc");
 var legend_node = d3.select(".list-inline");
+var subtitle = d3.select("#subtitle");
 
 input_node.property("value",1998);
 tooltip_node.attr("class", "tooltip1");
@@ -100,14 +101,14 @@ function filtrar_poblacion_esc(year){
 					 {
 					   ajax_result = data;
 					   //Cambiar subtítulo
-					   
+					   subtitle.text("Análisis clasificados según población escolar");
 					   //esconder el tooltip(si estuviera activo)
 					   tooltip_node.style("display","none");
 					   //cambiar colores de la leyenda
 					   update_legend(colores("pob_esc"));
 					   //rellenar svg con colores de acuerdo a la data,
 					   //actualizar hoovering,links y tooltip	
-					   // update_svg_dynamic(year,data,"pob_esc");	
+					   update_svg_dynamic(year,data,"pob_esc");	
 					 });
 			 }
 function update_legend(list){
@@ -225,8 +226,17 @@ function update_svg(año)
 				 }
 }
 
-// function update_svg_dynamic(year,data,input_form_selected){
-	// for(i in data)						  
-// }
+
+function update_svg_dynamic(year,data,input_form_selected){
+	var paths = d3.selectAll("path");
+	 for(var i = 0; i < n_paths; i++){
+		var path = paths[0][i];
+		// alert(path);
+		var prov = path_to_provs[path.id];
+		// alert(prov);
+		d3.select(path).transition()
+				  .style('fill','brown');
+	 }						  
+}
 
 update_svg(1998);
\ No newline at end of file
diff --git a/visualizacion/app/templates/clasificados.html b/visualizacion/app/templates/clasificados.html
index 6de5e76..9497cd0 100644
--- a/visualizacion/app/templates/clasificados.html
+++ b/visualizacion/app/templates/clasificados.html
@@ -1,7 +1,7 @@
 <div class="container">
 	<H2>
 	<center>
-	  <strong>Análisis clasificados y aprobados OMA.</strong> 
+	  <strong id="subtitle">Análisis clasificados y aprobados OMA.</strong> 
 	  <h3>Años 1998-2014.</h3>
 	  <br>
 	</center>
diff --git a/visualizacion/app/templates/poblacion_escolar.html b/visualizacion/app/templates/poblacion_escolar.html
deleted file mode 100644
index 97294d5..0000000
--- a/visualizacion/app/templates/poblacion_escolar.html
+++ /dev/null
@@ -1,4 +0,0 @@
-{% extends "index.html" %}
-{% block content %}
-	value = {{ data|safe }};
-{% endblock %}
\ No newline at end of file
diff --git a/visualizacion/app/templates/test.html b/visualizacion/app/templates/test.html
deleted file mode 100644
index f307c2c..0000000
--- a/visualizacion/app/templates/test.html
+++ /dev/null
@@ -1,9 +0,0 @@
-<!DOCTYPE html>
-<body>
-<div>
-  <h3>{{ var1 }}</h3>
-  <p align="justify">
-  {{ var2 }}
-  </p>
-</div>
-</body>
\ No newline at end of file
diff --git a/visualizacion/app/views.py b/visualizacion/app/views.py
index 75dc8d3..57a469e 100644
--- a/visualizacion/app/views.py
+++ b/visualizacion/app/views.py
@@ -2,8 +2,9 @@
 
 from flask import Flask, Markup, json, render_template,make_response, request, redirect, url_for, abort, session, Response
 from app import app
-
-from pandas import DataFrame
+import math
+from pandas import DataFrame,read_csv,merge
+from numpy import inf
 import numpy as np
 import xlrd
 import re
@@ -34,6 +35,7 @@ def get_pob_esc1(year):
 	
 	file1 = '../data/selected_pob_escolar/%s/EGB3.xls'
 	file2 = '../data/selected_pob_escolar/%s/POLIMODAL.xls'
+	file_clasif = '../data/clasificados/provcounts.csv'
 	
 	book1 = xlrd.open_workbook(file1 % year)
 	book2 = xlrd.open_workbook(file2 % year)
@@ -48,14 +50,26 @@ def get_pob_esc1(year):
 	book2_provs = list(map(check,sheet_book2.col_values(0)[4:28]))
 	book2_counts = sheet_book2.col_values(1)[4:28]
 	
-	df = DataFrame({'Provincia':book1_provs,
-					 'Cantidad':np.array(book1_counts)+np.array(book2_counts)})
+	df_clasif = read_csv(file_clasif)
+	
+	df_clasif = df_clasif[df_clasif['Año'] == year]
+	
+	df_clasif = DataFrame({'Provincia':df_clasif['Provincia'],
+						'Clasificados':df_clasif['Cantidad']})
+					
+	
+	df_pob_esc = DataFrame({'Provincia':book1_provs,
+					'Población':np.array(book1_counts)+np.array(book2_counts),
+					})
 	
-	return df
+	df = merge(df_pob_esc,df_clasif,on='Provincia',how='outer')
+	
+	return df.fillna(value=0)
 
 def get_pob_esc2(year):					
 	
 	file = '../data/selected_pob_escolar/%s/COMUN.xls'
+	file_clasif = '../data/clasificados/provcounts.csv'
 	
 	book = xlrd.open_workbook(file % year)
 	sheet_book = book.sheets()[0]
@@ -65,10 +79,54 @@ def get_pob_esc2(year):
 	book_counts_1 = sheet_book.col_values(4)[11:35]
 	book_counts_2 = sheet_book.col_values(8)[11:35]
 	
-	df = DataFrame({'Provincia':book_provs,
-					'Cantidad':np.array(book_counts_1)+np.array(book_counts_2)})
+	df_clasif = read_csv(file_clasif)
+	
+	df_clasif = df_clasif[df_clasif['Año'] == year]
+	
+	df_clasif = DataFrame({'Provincia':df_clasif['Provincia'],
+						'Clasificados':df_clasif['Cantidad']})
 	
-	return df
+	df_pob_esc = DataFrame({'Provincia':book_provs,
+					'Población':np.array(book_counts_1)+np.array(book_counts_2)})
+	
+	df = merge(df_pob_esc,df_clasif,on='Provincia',how='outer')
+	
+	return df.fillna(value=0)
+
+def save_div(m,n):
+	if n != 0:
+		return m/n
+	return 0	
+	
+def df_to_response(df,colores):
+	tmp = df.to_dict()
+	cantidades = df['Clasificados']/df['Población']
+	print(cantidades)
+	cantidades = list(map(lambda c: c if c != inf else 0.0,
+						[math.log(c + 1) for c in cantidades]))
+	print("after lambda:")
+	print(cantidades)	
+	max_value = max(cantidades)
+	min_value = min(cantidades)
+
+	def color(valor):
+		i = math.floor((len(colores)-1) * (math.log(valor + 1) - min_value) / (max_value - min_value))
+		return colores[i]
+	
+	res = {}
+	for i in range(24):
+		n = tmp['Población'][i]
+		m = tmp['Clasificados'][i]
+		index = save_div(m,n)	
+		res[tmp['Provincia'][i]] = {'Población':n,
+									'Clasificados':m,
+									'Índice':index,
+									'Color':color(index)}
+									#agregar después(quizá en otra parte)
+									#los datos por niveles
+	return res
+		
+# def color_picker(type,""):	
 	
 @app.route('/',methods=['GET'])
 @app.route('/index',methods=['GET'])
@@ -89,12 +147,13 @@ def index():
 						
 @app.route('/update',methods=['POST'])
 def update():
+	colores = ["#ecd1d1","#e0b6b6","#db9696",
+				"#7e4747","#410e0e"]
 	year = int(request.form['year'])
-	# colors = colores(request.form['type']) 
-	val1 = poblacion_escolar(year).to_json()
-	# print(val1)
-	# val = {'colores':colors,'datos':val1}
-	resp = Response(response=val1,
+	df = poblacion_escolar(year)
+	val = df_to_response(df,colores)
+	# print(val)
+	resp = Response(response=json.dumps(val),
 					status=200,
 					mimetype="application/json")
 	return(resp)				
\ No newline at end of file
